import { AI_PROMPTS } from "../utils/constants";

/**
 * Mock AI Service - S·ª≠ d·ª•ng responses m·∫´u
 * Trong production, thay b·∫±ng OpenAI API th·ª±c
 */

const mockResponses = {
  checkSentence: {
    correct: {
      isCorrect: true,
      message: "‚úÖ C√¢u c·ªßa b·∫°n ƒë√∫ng ng·ªØ ph√°p!",
      suggestions: [],
    },
    incorrect: {
      isCorrect: false,
      message: "‚ùå C√¢u c√≥ m·ªôt s·ªë l·ªói c·∫ßn s·ª≠a:",
      suggestions: [
        'Ng·ªØ ph√°p: N√™n d√πng "„Çí" thay v√¨ "„Å´" cho t√¢n ng·ªØ tr·ª±c ti·∫øp',
        'T·ª´ v·ª±ng: "È£ü„Åπ„Åæ„Åô" ph√π h·ª£p h∆°n "È£ü„ÅÜ" trong vƒÉn vi·∫øt l·ªãch s·ª±',
        "C·∫•u tr√∫c: Th·ª© t·ª± t·ª´ n√™n l√†: Ch·ªß ng·ªØ + „ÅØ + T√¢n ng·ªØ + „Çí + ƒê·ªông t·ª´",
      ],
      correctedSentence: "ÁßÅ„ÅØÊúù„Åî„ÅØ„Çì„ÇíÈ£ü„Åπ„Åæ„Åô„ÄÇ",
    },
  },
  explainError: {
    explanation:
      "üìö Gi·∫£i th√≠ch chi ti·∫øt:\n\n" +
      '1. Ng·ªØ ph√°p "„Äú„Å¶„ÅÑ„Çã" di·ªÖn t·∫£ h√†nh ƒë·ªông ƒëang ti·∫øp di·ªÖn ho·∫∑c tr·∫°ng th√°i.\n' +
      '2. Trong c√¢u n√†y, b·∫°n ƒë√£ d√πng "„Äú„Å¶„ÅÇ„Çã" l√† sai v√¨ "„Äú„Å¶„ÅÇ„Çã" di·ªÖn t·∫£ tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã s·∫µn.\n' +
      "3. ƒê√°p √°n ƒë√∫ng: Á™ì„ÅåÈñã„ÅÑ„Å¶„ÅÑ„Çã (C·ª≠a s·ªï ƒëang m·ªü)\n\n" +
      'üí° M·∫πo: "„Äú„Å¶„ÅÑ„Çã" = ƒëang l√†m g√¨, "„Äú„Å¶„ÅÇ„Çã" = ƒë√£ l√†m g√¨ s·∫µn r·ªìi',
  },
  generateExample: [
    "ÁßÅ„ÅØÊØéÊó•Êó•Êú¨Ë™û„ÇíÂãâÂº∑„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ(T√¥i h·ªçc ti·∫øng Nh·∫≠t m·ªói ng√†y)",
    "ÂΩºÂ•≥„ÅØÂõ≥Êõ∏È§®„ÅßÊú¨„ÇíË™≠„Çì„Åß„ÅÑ„Åæ„Åô„ÄÇ(C√¥ ·∫•y ƒëang ƒë·ªçc s√°ch ·ªü th∆∞ vi·ªán)",
    "ÂèãÈÅî„Å®Êò†Áîª„ÇíË¶ã„Å´Ë°å„Åç„Åü„ÅÑ„Åß„Åô„ÄÇ(T√¥i mu·ªën ƒëi xem phim v·ªõi b·∫°n)",
  ],
  suggestWriting: {
    topic: "‰ªäÊó•„ÅÆÂá∫Êù•‰∫ã",
    suggestions: [
      "Êúù„Åî„ÅØ„Çì„Å´‰Ωï„ÇíÈ£ü„Åπ„Åæ„Åó„Åü„ÅãÔºü",
      "‰ªäÊó•„ÅØ„Å©„Åì„Å´Ë°å„Åç„Åæ„Åó„Åü„ÅãÔºü",
      "ÂèãÈÅî„Å´‰ºö„ÅÑ„Åæ„Åó„Åü„ÅãÔºü",
      "‰ªäÊó•„ÅÆÂ§©Ê∞ó„ÅØ„Å©„ÅÜ„Åß„Åó„Åü„ÅãÔºü",
      "‰Ωï„ÅãÈù¢ÁôΩ„ÅÑ„Åì„Å®„Åå„ÅÇ„Çä„Åæ„Åó„Åü„ÅãÔºü",
    ],
    template: "‰ªäÊó•„ÅØ___„Å´Ë°å„Å£„Å¶„ÄÅ___„Çí„Åó„Åæ„Åó„Åü„ÄÇ„Å®„Å¶„ÇÇ___„Åß„Åó„Åü„ÄÇ",
  },
};

/**
 * Check sentence grammar and vocabulary
 */
export const checkSentence = async (
  sentence,
  grammarPoints = [],
  vocabulary = []
) => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Mock logic: Check if sentence has common patterns
  const hasCommonErrors =
    sentence.includes("„Å´È£ü„Åπ„Çã") ||
    sentence.includes("„ÅåË°å„Åè") ||
    sentence.length < 5;

  if (hasCommonErrors) {
    return mockResponses.checkSentence.incorrect;
  }

  return mockResponses.checkSentence.correct;
};

/**
 * Explain error with detailed explanation
 */
export const explainError = async (question, userAnswer, correctAnswer) => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000));

  return {
    question,
    userAnswer,
    correctAnswer,
    explanation: mockResponses.explainError.explanation,
  };
};

/**
 * Generate example sentences
 */
export const generateExampleSentences = async (
  grammarPoint,
  vocabularyList,
  difficulty = "normal"
) => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1500));

  const examples = mockResponses.generateExample;

  return {
    grammarPoint,
    vocabulary: vocabularyList,
    difficulty,
    examples: examples.map((ex, idx) => ({
      id: idx + 1,
      sentence: ex.split("(")[0].trim(),
      translation: ex.split("(")[1]?.replace(")", "") || "",
    })),
  };
};

/**
 * Suggest writing topics and guidance
 */
export const suggestWritingTopic = async () => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1000));

  return mockResponses.suggestWriting;
};

/**
 * Check diary entry
 */
export const checkDiaryEntry = async (content) => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 1500));

  const errorCount = Math.floor(Math.random() * 3);

  return {
    errorCount,
    errors:
      errorCount > 0
        ? [
            {
              line: 1,
              type: "grammar",
              message: 'N√™n d√πng "„Äú„Å¶„ÅÑ„Åæ„Åô" thay v√¨ "„Äú„Å¶„ÅÑ„Çã"',
            },
            {
              line: 2,
              type: "vocabulary",
              message: 'T·ª´ "ÁæéÂë≥„Åó„ÅÑ" ph√π h·ª£p h∆°n "„ÅÜ„Åæ„ÅÑ" trong nh·∫≠t k√Ω',
            },
          ].slice(0, errorCount)
        : [],
    suggestions: [
      "C·∫•u tr√∫c c√¢u t·ªët, ti·∫øp t·ª•c ph√°t huy!",
      "Th·ª≠ th√™m m·ªôt s·ªë li√™n t·ª´ ƒë·ªÉ c√¢u m∆∞·ª£t m√† h∆°n",
      "Vocabulary phong ph√∫, r·∫•t t·ªët!",
    ],
    overallScore: 85 + Math.floor(Math.random() * 15),
  };
};

/**
 * Call actual OpenAI API (for production)
 * Uncomment and configure when ready to use
 */

export const callOpenAI = async (prompt, model = "gpt-3.5-turbo") => {
  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;

  if (!API_KEY) {
    throw new Error("OpenAI API key not configured");
  }

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model,
        messages: [
          {
            role: "system",
            content:
              "„ÅÇ„Å™„Åü„ÅØÊó•Êú¨Ë™ûÊïôÂ∏´„Åß„Åô„ÄÇÂ≠¶ÁøíËÄÖ„ÅÆÊñáÁ´†„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„ÄÅÊîπÂñÑÁÇπ„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
        max_tokens: 500,
      }),
    });

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("OpenAI API error:", error);
    throw error;
  }
};

/**
 * Call actual Google Gemini API (for production)
 * Uncomment and configure when ready to use
 */

export const callGoogleGemini = async (prompt) => {
  const API_KEY = process.env.VITE_REACT_APP_GEMINI_API_KEY;
  if (!API_KEY) {
    throw new Error("Google Gemini API key not configured");
  }

  try {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: prompt }],
            },
          ],
        }),
      }
    );

    const data = await response.json();
    // Tr·∫£ v·ªÅ n·ªôi dung sinh ra
    return data.candidates?.[0]?.content?.parts?.[0]?.text || "";
  } catch (error) {
    console.error("Google Gemini API error:", error);
    throw error;
  }
};
