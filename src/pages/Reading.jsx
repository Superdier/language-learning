import React, { useState } from "react";
import {
  Container,
  Row,
  Col,
  Button,
  Card,
  Form,
  Badge,
  Alert,
} from "react-bootstrap";
import { FaBook, FaPlus, FaSpinner } from "react-icons/fa";
import { useApp } from "../contexts/AppContext";
import ReadingPassage from "../components/reading/ReadingPassage";
import {
  generateReadingPassage,
  getMockReadingPassages,
} from "../services/readingService";
import { READING_LEVELS } from "../utils/constants";

const Reading = () => {
  const { showNotification, addReviewRecord } = useApp();

  const [passages, setPassages] = useState(getMockReadingPassages());
  const [selectedPassage, setSelectedPassage] = useState(null);
  const [generating, setGenerating] = useState(false);
  const [showGenerator, setShowGenerator] = useState(false);

  const [generatorForm, setGeneratorForm] = useState({
    level: "beginner",
    topic: "",
    type: "short_passage",
  });

  const handleGeneratePassage = async () => {
    if (!generatorForm.topic.trim()) {
      showNotification("Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ", "error");
      return;
    }

    setGenerating(true);
    try {
      const passage = await generateReadingPassage(
        generatorForm.level,
        generatorForm.topic,
        generatorForm.type
      );

      const newPassage = {
        id: `reading-${Date.now()}`,
        ...passage,
      };

      setPassages([newPassage, ...passages]);
      setSelectedPassage(newPassage);
      setShowGenerator(false);
      setGeneratorForm({ level: "beginner", topic: "", type: "short_passage" });
      showNotification("ƒê√£ t·∫°o b√†i ƒë·ªçc m·ªõi!", "success");
    } catch (error) {
      showNotification("L·ªói khi t·∫°o b√†i ƒë·ªçc: " + error.message, "error");
    } finally {
      setGenerating(false);
    }
  };

  const handleCompleteReading = (result) => {
    // Save to review history
    addReviewRecord({
      type: "reading",
      itemId: result.passageId,
      correct: result.score === result.total,
      question: `ƒê·ªçc hi·ªÉu: ${
        passages.find((p) => p.id === result.passageId)?.title
      }`,
      userAnswer: `${result.score}/${result.total}`,
      correctAnswer: `${result.total}/${result.total}`,
    });

    showNotification(
      `Ho√†n th√†nh! ƒêi·ªÉm: ${result.score}/${result.total}`,
      result.score >= result.total * 0.8 ? "success" : "info"
    );
  };

  if (selectedPassage) {
    return (
      <Container fluid>
        <div className="mb-4">
          <Button
            variant="outline-secondary"
            onClick={() => setSelectedPassage(null)}
          >
            ‚Üê Quay l·∫°i danh s√°ch
          </Button>
        </div>

        <ReadingPassage
          passage={selectedPassage}
          onComplete={handleCompleteReading}
        />
      </Container>
    );
  }

  return (
    <Container fluid>
      <div className="mb-4">
        <h2 className="mb-1">üìñ ƒê·ªçc hi·ªÉu</h2>
        <p className="text-muted">Luy·ªán t·∫≠p k·ªπ nƒÉng ƒë·ªçc hi·ªÉu ti·∫øng Nh·∫≠t</p>
      </div>

      <Alert variant="info" className="mb-4">
        <strong>üí° H∆∞·ªõng d·∫´n:</strong> Ch·ªçn b√†i ƒë·ªçc ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô c·ªßa
        b·∫°n. ƒê·ªçc k·ªπ ƒëo·∫°n vƒÉn, sau ƒë√≥ tr·∫£ l·ªùi c√°c c√¢u h·ªèi. B·∫°n c√≥ th·ªÉ xem b·∫£n
        d·ªãch v√† t·ª´ v·ª±ng ƒë·ªÉ h·ªó tr·ª£.
      </Alert>

      {/* Generator */}
      <Card className="card-custom mb-4">
        <Card.Header>
          <div className="d-flex justify-content-between align-items-center">
            <h5 className="mb-0">
              <FaPlus className="me-2" />
              T·∫°o b√†i ƒë·ªçc m·ªõi
            </h5>
            <Button
              variant="outline-primary"
              size="sm"
              onClick={() => setShowGenerator(!showGenerator)}
            >
              {showGenerator ? "·∫®n" : "Hi·ªán"}
            </Button>
          </div>
        </Card.Header>

        {showGenerator && (
          <Card.Body>
            <Row>
              <Col md={4}>
                <Form.Group className="mb-3">
                  <Form.Label>C·∫•p ƒë·ªô</Form.Label>
                  <Form.Select
                    value={generatorForm.level}
                    onChange={(e) =>
                      setGeneratorForm({
                        ...generatorForm,
                        level: e.target.value,
                      })
                    }
                  >
                    <option value="beginner">S∆° c·∫•p (N5-N4)</option>
                    <option value="intermediate">Trung c·∫•p (N3-N2)</option>
                    <option value="advanced">N√¢ng cao (N1)</option>
                  </Form.Select>
                </Form.Group>
              </Col>

              <Col md={4}>
                <Form.Group className="mb-3">
                  <Form.Label>Lo·∫°i b√†i</Form.Label>
                  <Form.Select
                    value={generatorForm.type}
                    onChange={(e) =>
                      setGeneratorForm({
                        ...generatorForm,
                        type: e.target.value,
                      })
                    }
                  >
                    <option value="short_passage">ƒêo·∫°n vƒÉn ng·∫Øn</option>
                    <option value="article">B√†i b√°o</option>
                    <option value="dialogue">H·ªôi tho·∫°i</option>
                    <option value="story">Truy·ªán ng·∫Øn</option>
                  </Form.Select>
                </Form.Group>
              </Col>

              <Col md={4}>
                <Form.Group className="mb-3">
                  <Form.Label>Ch·ªß ƒë·ªÅ</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="VD: Ëá™Â∑±Á¥π‰ªã„ÄÅÊóÖË°å„ÄÅÈ£ü„ÅπÁâ©..."
                    value={generatorForm.topic}
                    onChange={(e) =>
                      setGeneratorForm({
                        ...generatorForm,
                        topic: e.target.value,
                      })
                    }
                  />
                </Form.Group>
              </Col>
            </Row>

            <Button
              variant="primary"
              onClick={handleGeneratePassage}
              disabled={generating || !generatorForm.topic.trim()}
            >
              {generating ? (
                <>
                  <FaSpinner className="spinner-border spinner-border-sm me-2" />
                  ƒêang t·∫°o...
                </>
              ) : (
                <>
                  <FaPlus className="me-2" />
                  T·∫°o b√†i ƒë·ªçc
                </>
              )}
            </Button>

            <Alert variant="warning" className="mt-3 mb-0">
              <small>
                <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> T√≠nh nƒÉng n√†y y√™u c·∫ßu Google AI API.
                {!import.meta.env.VITE_GOOGLE_AI_API_KEY && (
                  <>
                    {" "}
                    Vui l√≤ng c·∫•u h√¨nh <code>VITE_GOOGLE_AI_API_KEY</code> ƒë·ªÉ s·ª≠
                    d·ª•ng.
                  </>
                )}
              </small>
            </Alert>
          </Card.Body>
        )}
      </Card>

      {/* Passages List */}
      <h5 className="mb-3">üìö Danh s√°ch b√†i ƒë·ªçc ({passages.length})</h5>

      {passages.length === 0 ? (
        <Card className="card-custom">
          <Card.Body className="text-center py-5">
            <FaBook size={48} className="text-muted mb-3" />
            <p className="text-muted mb-0">
              Ch∆∞a c√≥ b√†i ƒë·ªçc n√†o. H√£y t·∫°o b√†i ƒë·ªçc m·ªõi!
            </p>
          </Card.Body>
        </Card>
      ) : (
        <Row>
          {passages.map((passage) => (
            <Col md={6} lg={4} key={passage.id} className="mb-4">
              <Card className="card-custom h-100">
                <Card.Body>
                  <div className="d-flex justify-content-between align-items-start mb-3">
                    <h6 className="mb-0">{passage.title}</h6>
                    <Badge bg="primary">{passage.level}</Badge>
                  </div>

                  <div className="mb-3">
                    <Badge bg="secondary" className="me-2">
                      {passage.type}
                    </Badge>
                    <Badge bg="info">
                      {passage.questions?.length || 0} c√¢u h·ªèi
                    </Badge>
                  </div>

                  <p
                    className="text-muted small mb-3"
                    style={{
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                      display: "-webkit-box",
                      WebkitLineClamp: 3,
                      WebkitBoxOrient: "vertical",
                    }}
                  >
                    {passage.passage}
                  </p>

                  <Button
                    variant="primary"
                    className="w-100"
                    onClick={() => setSelectedPassage(passage)}
                  >
                    <FaBook className="me-2" />
                    B·∫Øt ƒë·∫ßu ƒë·ªçc
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default Reading;
