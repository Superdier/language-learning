import React, { useState } from "react";
import { Container, Row, Col, ButtonGroup, Button } from "react-bootstrap";
import {
  FaChartLine,
  FaBook,
  FaLanguage,
  FaFire,
  FaClock,
} from "react-icons/fa";
import { useApp } from "../contexts/AppContext";
import Card from "../components/ui/Card";
import StatCard from "../components/ui/StatCard";
import ProgressChart from "../components/charts/ProgressChart";
import RecentActivity from "../components/common/RecentActivity";
import QuickActions from "../components/common/QuickActions";
import { calculateStreak } from "../utils/helpers";
import { generateMockKanjiItems, generateMockGrammarItems, generateMockVocabularyItems, generateMockReviewHistory } from '../utils/mockData';

const Dashboard = () => {
  const { grammarItems, vocabularyItems, kanjiItems, reviewHistory, setGrammarItems, setVocabularyItems, setKanjiItems, setReviewHistory } = useApp();
  const [chartViewMode, setChartViewMode] = useState("week");

  // Calculate statistics
  const totalGrammar = grammarItems.length;
  const totalVocabulary = vocabularyItems.length + kanjiItems.length;
  const totalReviews = reviewHistory.length;
  const streak = calculateStreak(reviewHistory);

  // Calculate today's reviews
  const today = new Date().toDateString();
  const todayReviews = reviewHistory.filter((record) => {
    const recordDate = new Date(record.date).toDateString();
    return today === recordDate;
  }).length;

  // Calculate items due for review
  const itemsDue = [...grammarItems, ...vocabularyItems, ...kanjiItems].filter(
    (item) => {
      if (!item.nextReviewDate) return true;
      return new Date(item.nextReviewDate) <= new Date();
    }
  ).length;

  const loadMockData = () => {
    setGrammarItems(generateMockGrammarItems(20));
    setVocabularyItems(generateMockVocabularyItems(30));
    setKanjiItems(generateMockKanjiItems(15));
    setReviewHistory(generateMockReviewHistory(7));
    window.alert('ƒê√£ t·∫£i d·ªØ li·ªáu m·∫´u th√†nh c√¥ng!');
  };

  const stats = [
    {
      title: "Ng·ªØ ph√°p ƒë√£ h·ªçc",
      value: totalGrammar,
      icon: <FaBook />,
      color: "danger",
      subtitle: `${itemsDue} m·ª•c c·∫ßn √¥n`,
    },
    {
      title: "T·ª´ v·ª±ng ƒë√£ h·ªçc",
      value: totalVocabulary,
      icon: <FaLanguage />,
      color: "info",
      subtitle: "Bao g·ªìm Kanji",
    },
    {
      title: "√în t·∫≠p h√¥m nay",
      value: todayReviews,
      icon: <FaClock />,
      color: "success",
      subtitle: `${totalReviews} l∆∞·ª£t t·ªïng`,
    },
    {
      title: "Chu·ªói h·ªçc li√™n ti·∫øp",
      value: `${streak} ng√†y`,
      icon: <FaFire />,
      color: "warning",
      subtitle: "Ti·∫øp t·ª•c ph√°t huy!",
    },
  ];

  return (
    <Container fluid>
      <div className="mb-4 d-flex justify-content-between align-items-center">
        <div>
          <h2 className="mb-1">üè† Dashboard</h2>
          <p className="text-muted">T·ªïng quan v·ªÅ ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>
        <Button variant="outline-secondary" onClick={loadMockData}>
          T·∫£i d·ªØ li·ªáu m·∫´u
        </Button>
      </div>

      {/* Statistics Cards */}
      <Row className="mb-4">
        {stats.map((stat, index) => (
          <Col md={6} lg={3} key={index} className="mb-3">
            <StatCard {...stat} />
          </Col>
        ))}
      </Row>

      {/* Quick Actions */}
      <div className="mb-4">
        <h5 className="mb-3">‚ö° Thao t√°c nhanh</h5>
        <QuickActions />
      </div>

      {/* Progress Chart */}
      <Row className="mb-4">
        <Col md={12}>
          <Card>
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h5 className="mb-0">
                <FaChartLine className="me-2 text-primary" />
                Bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô
              </h5>
              <ButtonGroup size="sm">
                <Button
                  variant={
                    chartViewMode === "week" ? "primary" : "outline-primary"
                  }
                  onClick={() => setChartViewMode("week")}
                >
                  7 ng√†y
                </Button>
                <Button
                  variant={
                    chartViewMode === "month" ? "primary" : "outline-primary"
                  }
                  onClick={() => setChartViewMode("month")}
                >
                  30 ng√†y
                </Button>
              </ButtonGroup>
            </div>

            <ProgressChart
              reviewHistory={reviewHistory}
              viewMode={chartViewMode}
            />
          </Card>
        </Col>
      </Row>

      {/* Recent Activity */}
      <Row>
        <Col md={12}>
          <Card title="üìù Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y">
            <RecentActivity reviewHistory={reviewHistory} limit={8} />
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Dashboard;
